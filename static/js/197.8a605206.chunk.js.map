{"version":3,"file":"static/js/197.8a605206.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/Component/ContactForm/ContactForm.module.css?8785","Component/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/Component/Filter/Filter.module.css?0147","Component/Filter/Filter.jsx","webpack://react-homework-template/./src/Component/ContactsListItem/ContactListItem.module.css?6821","Component/ContactsListItem/ContactSListItem.jsx","webpack://react-homework-template/./src/Component/ContactList/ContactList.module.css?ce07","helpers/filterContacts.js","Component/ContactList/ContactList.jsx","redux/contacts/contacts-actions.js","redux/contacts/contacts-operations.js","pages/ContactsBooks.jsx","webpack://react-homework-template/./src/pages/Pages.module.css?6bb4"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"blockform\":\"ContactForm_blockform__7wifA\",\"LabelForm\":\"ContactForm_LabelForm__PQTCj\",\"NamesForm\":\"ContactForm_NamesForm__sU3Tn\",\"ButtonsContact\":\"ContactForm_ButtonsContact__4ym86\",\"InputForm\":\"ContactForm_InputForm__yTwDU\"};","import {useState, useEffect, memo } from 'react'\nimport styles from '../ContactForm/ContactForm.module.css'\nimport { nanoid } from '@reduxjs/toolkit';\nimport { useAddContactMutation, useGetContactsQuery, } from '../../redux/contacts/contacts-api';\nimport { BallTriangle } from 'react-loader-spinner';\nimport toast, { Toaster } from 'react-hot-toast';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\n\n\nconst ContactForm = () => {\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n    const { data: contacts } = useGetContactsQuery();\n    const [addContact, { isLoading }] = useAddContactMutation();\n    const [formValid, setFormvalid] = useState(false); \n\n        useEffect(() => {\n            if ( name === '' || number === '') {\n                setFormvalid(true)\n            } else {\n                setFormvalid(false) \n            }\n        }, [name, number])\n  \nconst handleInputChange = e => {\n        const { name, value } = e.target;\n        switch (name) {\n            case 'name':\n                setName(value)\n                break;\n\n            case 'number':\n                setNumber(value)\n                break;\n\n            default:\n                return;\n        }\n    }\n    \nconst handleSubmit = e => {\n    e.preventDefault();\n    if(contactExits()){\n        toast.success(`${name} is already in contacts`, {\n            style: {\n                border: '1px solid red',\n                padding: '16px',\n                color: 'red',\n            },\n            iconTheme: {\n                primary: 'red',\n                secondary: '#FFFAEE',\n            },\n        });\n        return;\n    }\n    addContact({ name, number, id: nanoid() });\n    setName('');\n    setNumber('');\n    toast.success('Contact added!');\n    };\n    \n    const contactExits = () =>\n        contacts.find(contact =>\n            contact.name.toUpperCase() === name.toUpperCase() || contact.number === number);  \n    \n\n    return(\n        <form className={styles.forma} onSubmit={handleSubmit}>\n            <div className={styles.blockform}>\n                \n                <TextField\n                    className={styles.InputForm}\n                    id=\"outlined-basic\"\n                    label=\"Name\"\n                    variant=\"outlined\"\n                    type=\"text\"\n                    name=\"name\"\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n                    required\n                    value={name}\n                    onChange={handleInputChange}              \n                />\n\n                <TextField\n                    className={styles.InputForm}\n                    id=\"outlined-basic\"\n                    label=\"Telephone\"\n                    variant=\"outlined\"\n                    type=\"number\"\n                    name=\"number\"\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n                    required\n                    value={number}\n                    onChange={handleInputChange}\n                    />\n            </div>\n            <Button\n                disabled={formValid}\n                type=\"submit\"\n                variant=\"outlined\">\n                {isLoading ? <BallTriangle color=\"#00BFFF\" height={20} width={20} /> : 'Add contact'}\n            </Button>\n            <Toaster position=\"top-center\"/>\n        </form>\n    );\n  }\n\n\nexport default memo(ContactForm);","// extracted by mini-css-extract-plugin\nexport default {\"LabelForm\":\"Filter_LabelForm__5FURR\",\"NamesForm\":\"Filter_NamesForm__NVh6x\",\"InputName\":\"Filter_InputName__WwURk\"};","import styles from './Filter.module.css';\nimport { contactsFilter } from '../../redux/toogleContacts';\nimport { useDispatch } from 'react-redux';\nimport Input from '@mui/material/Input';\n\nconst Filter = () => {\n    const dispatch = useDispatch();\n\n    const filterUsers = e => {\n        dispatch(contactsFilter(e.currentTarget.value));\n    };\n    return(\n        <label className={styles.LabelForm}>\n            <span className={styles.NamesForm}>Find contacts by name</span>\n            <Input className={styles.InputName}\n                type=\"text\"\n                name=\"filter\"\n                placeholder='filter contacts'\n                onChange={filterUsers} \n            />\n        </label>\n    );\n}\n\nexport default Filter;","// extracted by mini-css-extract-plugin\nexport default {\"ButtonsContact\":\"ContactListItem_ButtonsContact__nYGHx\",\"NumberContacts\":\"ContactListItem_NumberContacts__P3EA2\",\"DeleteContact\":\"ContactListItem_DeleteContact__PQos2\",\"IconsDelete\":\"ContactListItem_IconsDelete__39UkZ\",\"IconsRemove\":\"ContactListItem_IconsRemove__oLgqX\",\"EditButton\":\"ContactListItem_EditButton__MvSK+\",\"EditIcon\":\"ContactListItem_EditIcon__I2pD9\",\"ButtonDone\":\"ContactListItem_ButtonDone__cCAMZ\",\"IconDone\":\"ContactListItem_IconDone__fJvs3\",\"DefaultInput\":\"ContactListItem_DefaultInput__dG43Z\",\"DroupContent\":\"ContactListItem_DroupContent__91i1u\",\"Backdroup\":\"ContactListItem_Backdroup__J9yck\",\"InputModal\":\"ContactListItem_InputModal__Ce1Xt\",\"editModal\":\"ContactListItem_editModal__L46+7\",\"EditDelete\":\"ContactListItem_EditDelete__J-9z5\"};","/* eslint-disable react-hooks/exhaustive-deps */\nimport PropTypes from 'prop-types'; \nimport styles from './ContactListItem.module.css';\nimport {\n    useDeleteContactsMutation,\n    useEditPostContactMutation\n} from '../../redux/contacts/contacts-api';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport AutoDeleteIcon from '@mui/icons-material/AutoDelete';\nimport EditIcon from '@mui/icons-material/Edit';\nimport 'react-edit-text/dist/index.css';\nimport { useState, useEffect } from 'react';\nimport DoneIcon from '@mui/icons-material/Done';\nimport toast from 'react-hot-toast';\nimport CloseIcon from '@mui/icons-material/Close';\nimport IconButton from '@mui/material/IconButton';\nimport Tooltip from '@mui/material/Tooltip';\n\nconst ContactListItem = ({ id, name, number }) => {\n    const [editContact] = useEditPostContactMutation();\n    const [deleteContact, { isLoading: isDeleting }] = useDeleteContactsMutation();\n    const [contactIndex, setContactIndex] = useState(null);\n    const [editName, setEditName] = useState(name);\n    const [editPhone, setEditPhone] = useState(number);\n    const [isModal, setIsModal] = useState(false);\n\n    const handleModalClose = e => {\n        if (e.keyCode === 27) {\n            handleEditContact();\n        }\n    }\n\n    const exitsModalMouse = (e) => {\n        if (e.target === e.currentTarget) {\n            handleExitContact();\n        }\n    }\n\n    useEffect(() => {\n        window.addEventListener('keydown', handleModalClose);\n            return () => {\n        window.removeEventListener('keydown', handleModalClose);\n       } \n    }, [handleModalClose]);\n\n    const handleEditContact = (index) => {\n        setIsModal(!isModal);\n        setContactIndex(index)\n    }\n\n    const handleExitContact = () => {\n        setContactIndex(null)\n    }\n\n    const handleDeleteContact = async id => {\n            await deleteContact(id)\n            toast.error('Contact delete!');\n    }\n\n    const handleSubmitSaveContact = async e => {\n        e.preventDefault()\n        setContactIndex(null)\n        if (editName && editPhone) {\n            await editContact({ id: id, name: editName, number: editPhone })\n        }\n    }\n\n    return (\n        <>\n            <span className={styles.NumberContacts}>\n                {name}: {number}\n            </span>\n\n            {contactIndex ? (\n                <div onClick={exitsModalMouse}\n                    className={styles.Backdroup}>\n                    <form onSubmit={handleSubmitSaveContact}>\n                        <div  className={styles.DroupContent}>\n                            <div className={styles.DefaultInput}>\n                                <input\n                                    className={styles.InputModal}\n                                    type=\"text\"\n                                    value={editName || ''}\n                                    onChange={(e) => setEditName(e.target.value)}\n                                />\n                            \n                                <input\n                                    className={styles.InputModal}\n                                    type=\"number\"\n                                    value={editPhone || ''}\n                                    onChange={(e) => setEditPhone(e.target.value)}\n                                />\n                                </div>\n                                <button\n                                    className={styles.ButtonDone}\n                                type='submit'>\n                                <DoneIcon className={styles.IconDone} /></button>\n                                <button\n                                    type='button'\n                                    onClick={handleExitContact}\n                                    className={styles.editModal}\n                                ><CloseIcon /></button>\n                            </div>\n                        </form>\n                    </div>\n                ) : (\n                    <div className={styles.EditDelete}>\n                        <button\n                            onClick={() => handleEditContact(id)}\n                            className={styles.EditButton}\n                            type='button'>\n                                <Tooltip title=\"Edit\">\n                                <IconButton size=\"small\">\n                                    <EditIcon fontSize=\"small\" className={styles.EditIcon} /> \n                                </IconButton>\n                                </Tooltip>\n                        </button>\n                        <button\n                            className={styles.ButtonsContact}\n                            type=\"button\"\n                            onClick={() => handleDeleteContact(id)}>\n                            {isDeleting ?\n                                <Tooltip title=\"Delete\">\n                                <IconButton size=\"small\">\n                                    <AutoDeleteIcon fontSize=\"small\" className={styles.IconsRemove} /> \n                                </IconButton>\n                                </Tooltip>\n                                :\n                                <Tooltip title=\"Delete\">\n                                <IconButton size=\"small\">\n                                    <DeleteIcon fontSize=\"small\" className={styles.IconsDelete}  />\n                                </IconButton>\n                                </Tooltip>\n                            }\n                        </button>\n                    </div>\n                )}\n            </>\n        );\n    }\n\n    ContactListItem.propTypes = {\n        id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        number: PropTypes.string.isRequired,\n    };\n\nexport default ContactListItem;","// extracted by mini-css-extract-plugin\nexport default {\"ContactList\":\"ContactList_ContactList__TIBqY\",\"ItemContacts\":\"ContactList_ItemContacts__nXX0G\"};","const filterContacts = (contacts, filterValue) => {\n    return contacts.filter(({name}) =>\n        name.toLowerCase().includes(filterValue.toLowerCase().trim()))\n}\nexport default filterContacts;\n","import ContactListItem from '../ContactsListItem/ContactSListItem';\nimport s from './ContactList.module.css';\nimport filterContacts from '../../helpers/filterContacts';\nimport { useGetContactsQuery } from '../../redux/contacts/contacts-api';\nimport { useSelector } from 'react-redux';\n\nconst ContactList = () => {\n    const { data } = useGetContactsQuery();\n    const filterValue = useSelector((state) => state.contacts.filter);\n\n    return(\n        <ul className={s.ContactList}>\n            {data &&\n                filterContacts(data, filterValue).map(({ id, name, number }) => (\n        <li className={s.ItemContacts} key={id}>\n            <ContactListItem\n                id={id}\n                name={name}\n                number={number}\n            />\n        </li>          \n    ))}\n    </ul>\n    )\n}\n\nexport default ContactList;","import { createAction } from '@reduxjs/toolkit';\n\nexport const fetchContactsRequest = createAction('contacts/fetchTodosRequest');\nexport const fetchContactsSuccess = createAction('contacts/fetchTodosSuccess');\nexport const fetchContactsError = createAction('contacts/fetchTodosError');","import axios from \"axios\";\nimport {\n    fetchContactsError,\n    fetchContactsRequest,\n    fetchContactsSuccess\n} from \"./contacts-actions\";\n\nconst fetchContacts = () => async dispatch => {\n    dispatch(fetchContactsRequest());\n\n    try {\n        const { data } = await axios.get('/contacts');\n        dispatch(fetchContactsSuccess(data));\n    } catch (error) {\n        dispatch(fetchContactsError(error.message));\n    }\n}\n\nconst contactsOperations = {\n    fetchContacts,\n}\n\nexport default contactsOperations;","import ContactForm from '../Component/ContactForm/ContactForm';\nimport Filter from '../Component/Filter/Filter';\nimport ContactList from '../Component/ContactList/ContactList';\nimport contactsOperations from '../redux/contacts/contacts-operations';\nimport { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport s from './Pages.module.css'\nimport PhoneIphoneIcon from '@mui/icons-material/PhoneIphone';\n\nconst ContactsBook = () => {\n    const dispatch = useDispatch();\n    \n    useEffect(() => {\n        dispatch(contactsOperations.fetchContacts())\n    }, [dispatch]);\n\n    return (\n        <div className={s.Forms}>\n        <h1 className={s.PhoneBook}><PhoneIphoneIcon/>Phonebook</h1>\n        <ContactForm/>\n        <h2 className={s.Contacts}>Contacts</h2>\n            <Filter/>\n            <ContactList />\n        </div>\n    )\n}\n\nexport default ContactsBook;","// extracted by mini-css-extract-plugin\nexport default {\"HomePhone\":\"Pages_HomePhone__4bjw-\",\"PersonWelcom\":\"Pages_PersonWelcom__0ePYp\",\"Forms\":\"Pages_Forms__yR4cF\",\"PhoneBook\":\"Pages_PhoneBook__ebPAg\",\"Contacts\":\"Pages_Contacts__9kmGg\",\"FormRegister\":\"Pages_FormRegister__kD0WT\",\"InputRegister\":\"Pages_InputRegister__C6zst\",\"InputPosition\":\"Pages_InputPosition__UB-ip\",\"InputEidth\":\"Pages_InputEidth__j6D1I\",\"RegisterText\":\"Pages_RegisterText__xRyZW\",\"TextProject\":\"Pages_TextProject__08Xwh\",\"BackLogin\":\"Pages_BackLogin__h8bbX\",\"ButtRegis\":\"Pages_ButtRegis__CATAz\",\"ErrorType\":\"Pages_ErrorType__cngzF\"};"],"names":["ContactForm","useState","name","setName","number","setNumber","contacts","useGetContactsQuery","data","useAddContactMutation","addContact","isLoading","formValid","setFormvalid","useEffect","handleInputChange","e","target","value","contactExits","find","contact","toUpperCase","className","styles","onSubmit","preventDefault","toast","style","border","padding","color","iconTheme","primary","secondary","id","nanoid","TextField","label","variant","type","pattern","title","required","onChange","Button","disabled","height","width","position","memo","dispatch","useDispatch","Input","placeholder","contactsFilter","currentTarget","useEditPostContactMutation","editContact","useDeleteContactsMutation","deleteContact","isDeleting","contactIndex","setContactIndex","editName","setEditName","editPhone","setEditPhone","isModal","setIsModal","handleModalClose","keyCode","handleEditContact","window","addEventListener","removeEventListener","index","handleExitContact","handleDeleteContact","handleSubmitSaveContact","onClick","Done","Close","Tooltip","IconButton","size","Edit","fontSize","AutoDelete","Delete","filterValue","filter","toLowerCase","includes","trim","useSelector","state","s","filterContacts","map","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","contactsOperations","fetchContacts","axios","message","PhoneIphone"],"sourceRoot":""}